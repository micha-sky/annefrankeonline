{"version":3,"sources":["js/sketch.js"],"names":["Sketch","opts","scene","THREE","Scene","vertex","fragment","uniforms","renderer","WebGLRenderer","width","window","innerWidth","height","innerHeight","setPixelRatio","devicePixelRatio","setSize","setClearColor","duration","debug","easing","clicker","document","getElementById","container","attribute","getAttribute","console","log","images","JSON","parse","offsetWidth","offsetHeight","appendChild","domElement","camera","PerspectiveCamera","position","set","time","current","textures","paused","initiate","setupResize","settings","addObjects","resize","clickEvent","play","cb","promises","that","forEach","url","i","promise","Promise","resolve","TextureLoader","load","minFilter","LinearFilter","push","all","then","addEventListener","next","gui","dat","GUI","progress","add","Object","keys","item","value","min","max","bind","a1","a2","aspect","imageAspect","image","material","resolution","x","y","z","w","dist","fov","Math","PI","atan","plane","scale","updateProjectionMatrix","ShaderMaterial","extensions","derivatives","side","DoubleSide","type","border","intensity","scaleX","scaleY","transition","swipe","radius","texture1","texture2","displacement","Vector4","vertexShader","fragmentShader","geometry","PlaneGeometry","Mesh","render","isRunning","len","length","nextTexture","TimelineMax","to","ease","Power2","onComplete","requestAnimationFrame"],"mappings":"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","file":"sketch.78fb71f2.js","sourceRoot":"..","sourcesContent":["class Sketch {\n    constructor(opts) {\n        this.scene = new THREE.Scene();\n        this.vertex = `varying vec2 vUv;void main() {vUv = uv;gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );}`;\n        this.fragment = opts.fragment;\n        this.uniforms = opts.uniforms;\n        this.renderer = new THREE.WebGLRenderer();\n        this.width = window.innerWidth;\n        this.height = window.innerHeight;\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setSize(this.width, this.height);\n        this.renderer.setClearColor(0xeeeeee, 1);\n        this.duration = opts.duration || 1;\n        this.debug = opts.debug || true\n        this.easing = opts.easing || 'easeInOut'\n\n        this.clicker = document.getElementById(\"content\");\n\n\n        this.container = document.getElementById(\"slider\");\n        let attribute = this.container.getAttribute('data-images');\n        console.log(attribute);\n        this.images = JSON.parse(attribute);\n\n        this.width = this.container.offsetWidth;\n        this.height = this.container.offsetHeight;\n        this.container.appendChild(this.renderer.domElement);\n\n        this.camera = new THREE.PerspectiveCamera(\n            70,\n            window.innerWidth / window.innerHeight,\n            0.001,\n            1000\n        );\n\n        this.camera.position.set(0, 0, 2);\n        this.time = 0;\n        this.current = 0;\n        this.textures = [];\n\n        this.paused = true;\n        this.initiate(() => {\n            console.log(this.textures);\n            console.log(\"initiating\");\n            this.setupResize();\n            this.settings();\n            this.addObjects();\n            this.resize();\n            this.clickEvent();\n            this.play();\n        })\n\n\n    }\n\n    initiate(cb) {\n        console.log(\"initiating\");\n        const promises = [];\n        let that = this;\n        this.images.forEach((url, i) => {\n            let promise = new Promise(resolve => {\n                that.textures[i] = new THREE.TextureLoader().load(url, resolve);\n                that.textures[i].minFilter = THREE.LinearFilter;\n            });\n            promises.push(promise);\n        })\n\n        Promise.all(promises).then(() => {\n            cb();\n        });\n    }\n\n    // todo up down logic\n    clickEvent() {\n        this.clicker.addEventListener('click', () => {\n            this.next();\n        })\n    }\n\n    settings() {\n        console.log(\"setting\");\n        let that = this;\n        if (this.debug) this.gui = new dat.GUI();\n        this.settings = {progress: 0.5};\n        if(this.debug) this.gui.add(this.settings, \"progress\", 0, 1, 0.01);\n\n        Object.keys(this.uniforms).forEach((item) => {\n            this.settings[item] = this.uniforms[item].value;\n            if (this.debug) this.gui.add(this.settings, item, this.uniforms[item].min, this.uniforms[item].max, 0.01);\n        })\n    }\n\n    setupResize() {\n        window.addEventListener(\"resize\", this.resize.bind(this));\n    }\n\n    resize() {\n        this.width = this.container.offsetWidth;\n        this.height = this.container.offsetHeight;\n        this.renderer.setSize(this.width, this.height);\n        this.camera.aspect = this.width / this.height;\n\n\n        // image cover\n        this.imageAspect = this.textures[0].image.height / this.textures[0].image.width;\n        let a1;\n        let a2;\n        if (this.height / this.width > this.imageAspect) {\n            a1 = (this.width / this.height) * this.imageAspect;\n            a2 = 1;\n        } else {\n            a1 = 1;\n            a2 = (this.height / this.width) / this.imageAspect;\n        }\n\n        this.material.uniforms.resolution.value.x = this.width;\n        this.material.uniforms.resolution.value.y = this.height;\n        this.material.uniforms.resolution.value.z = a1;\n        this.material.uniforms.resolution.value.w = a2;\n\n        const dist = this.camera.position.z;\n        const height = 1;\n        this.camera.fov = 2 * (180 / Math.PI) * Math.atan(height / (2 * dist));\n\n        this.plane.scale.x = this.camera.aspect;\n        this.plane.scale.y = 1;\n\n        this.camera.updateProjectionMatrix();\n\n\n    }\n\n    addObjects() {\n        let that = this;\n        this.material = new THREE.ShaderMaterial({\n            extensions: {\n                derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n            },\n            side: THREE.DoubleSide,\n            uniforms: {\n                time: {type: \"f\", value: 0},\n                progress: {type: \"f\", value: 0},\n                border: {type: \"f\", value: 0},\n                intensity: {type: \"f\", value: 0},\n                scaleX: {type: \"f\", value: 40},\n                scaleY: {type: \"f\", value: 40},\n                transition: {type: \"f\", value: 40},\n                swipe: {type: \"f\", value: 0},\n                width: {type: \"f\", value: 0},\n                radius: {type: \"f\", value: 0},\n                texture1: {type: \"f\", value: this.textures[0]},\n                texture2: {type: \"f\", value: this.textures[1]},\n                displacement: {type: \"f\", value: new THREE.TextureLoader().load('img/disp3.jpg')},\n                resolution: {type: \"v4\", value: new THREE.Vector4()},\n            },\n            // wireframe: true,\n            vertexShader: this.vertex,\n            fragmentShader: this.fragment\n        });\n\n        this.geometry = new THREE.PlaneGeometry(1, 1, 2, 2);\n\n        this.plane = new THREE.Mesh(this.geometry, this.material);\n        this.scene.add(this.plane);\n    }\n\n    stop() {\n        this.paused = true;\n    }\n\n    play() {\n        this.paused = false;\n        this.render();\n    }\n\n    next() {\n        if (this.isRunning) return;\n        this.isRunning = true;\n        let len = this.textures.length;\n        let nextTexture = this.textures[(this.current + 1) % len];\n        this.material.uniforms.texture2.value = nextTexture;\n        let tl = new TimelineMax();\n        tl.to(this.material.uniforms.progress, this.duration, {\n            value: 1,\n            ease: Power2[this.easing],\n            onComplete: () => {\n                console.log('FINISH');\n                this.current = (this.current + 1) % len;\n                this.material.uniforms.texture1.value = nextTexture;\n                this.material.uniforms.progress.value = 0;\n                this.isRunning = false;\n            }\n        })\n    }\n\n    render() {\n        if (this.paused) return;\n        this.time += 0.3;\n        this.material.uniforms.time.value = this.time;\n        // this is cool this.material.uniforms.progress.value = this.settings.progress;\n        console.log(\"render\");\n        console.log(this.material.uniforms.progress.value);\n\n        Object.keys(this.uniforms).forEach((item) => {\n            this.material.uniforms[item].value = this.settings[item];\n        });\n\n        //this.camera.position.z = 3;\n       // this.plane.rotation.y = 0.1 * Math.sin(0.3 * this.time)\n        //this.plane.rotation.x = 0.2 * Math.sin(0.1 * this.time)\n\n        requestAnimationFrame(this.render.bind(this));\n        this.renderer.render(this.scene, this.camera);\n    }\n\n\n}\n"]}